stages:
  - build
  - release

.default-build-image: &default-build-image
  image: docker:24.0.7
  retry:
    max: 2
    when:
      - always
  tags:
    - docker
  services:
    - name: docker:dind
  before_script:
    - docker info
  script:
    - echo "Build $IMAGE_NAME Docker image"
    - docker build -t $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG $DOCKERFILE_PATH
    - echo "Login to Docker Hub"
    - echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
    - echo "Push to Docker Hub"
    - docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$IMAGE_TAG

build-nextjs-service:
  <<: *default-build-image
  stage: build
  variables:
    IMAGE_NAME: ms-nextjs-service
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
    DOCKERFILE_PATH: ./frontend
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'

build-auth-service:
  <<: *default-build-image
  stage: build
  variables:
    IMAGE_NAME: ms-auth-service
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
    DOCKERFILE_PATH: ./backend/auth
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'

build-user-service:
  <<: *default-build-image
  stage: build
  variables:
    IMAGE_NAME: ms-user-service
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
    DOCKERFILE_PATH: ./backend/user
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'

create-release-mr:
  stage: release
  image: alpine:latest
  variables:
    IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  script:
    - |
      set -e
      apk update && apk add git curl
      
      echo "Updating image tag in deployment files to $IMAGE_TAG"
      find ./deployment -type f -name "deployment.yaml" -exec sed -i "s|image: \(.*\):.*|image: \1:$IMAGE_TAG|g" {} +
      
      echo "Checking for changes..."
      if [ -z "$(git status --porcelain ./deployment)" ]; then
        echo "No changes detected in deployment files. Skipping MR creation."
        exit 0
      fi
      
      echo "Configuring git..."
      git config --global user.email "${GITLAB_USER_EMAIL:-'gitlab-ci@example.com'}"
      git config --global user.name "${GITLAB_USER_NAME:-'GitLab CI'}"
      
      BRANCH_NAME="release/update-tags-${IMAGE_TAG}"
      echo "Creating and switching to new branch: ${BRANCH_NAME}"
      git checkout -b "${BRANCH_NAME}"
      git add ./deployment/
      git commit -m "Gitlab CI: Update image tags to $IMAGE_TAG"
      
      echo "Pushing changes to remote..."
      git push "http://gitlab-ci-token:${GITLAB_API_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git" "HEAD:${BRANCH_NAME}"
      
      echo "Creating Merge Request..."
      curl --request POST \
           --header "PRIVATE-TOKEN: ${GITLAB_API_TOKEN}" \
           --header "Content-Type: application/json" \
           --data '{
             "source_branch": "'"${BRANCH_NAME}"'",
             "target_branch": "main",
             "title": "Gitlab CI: Update image tags for '"$IMAGE_TAG"'",
             "description": "This MR was automatically created by the CI pipeline. It updates deployment image tags to '"${CI_COMMIT_SHA}"'.",
             "remove_source_branch": true
           }' \
           "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests"
      
      echo "Merge Request created successfully."
  rules:
    - if: '$CI_COMMIT_BRANCH == "dev"'
